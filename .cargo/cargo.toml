# Choose a default "cargo run" tool.
# probe-run is recommended if you have a debugger
# elf2uf2-rs loads firmware over USB when the rp2040 is in boot mode
[target.'cfg(all(target_arch = "arm", target_os = "none"))']
# runner = "elf2uf2-rs" # Create a uf2 file.
runner = "elf2uf2-rs -d" # Download directly to sprig if in BOOTSEL mode.
# runner = "probe-run --chip RP2040" # Run through a pico probe. (This is the way.)

rustflags = [
  "-C", "linker=flip-link",
  "-C", "link-arg=--nmagic",
  "-C", "link-arg=-Tlink.x",
  "-C", "link-arg=-Tdefmt.x",

  # Code-size optimizations.
  #   trap unreachable can save a lot of space, but requires nightly compiler.
  #   uncomment the next line if you wish to enable it
  "-Z", "trap-unreachable=no",
  # "-C", "inline-threshold=5",
  # "-C", "no-vectorize-loops",
  # "-v",
]

# This doesn't work for a lib which the wasm files are.
# [target.'cfg(target_family = "wasm")']
# runner = "wasm-bindgen --out-dir html/wasm --target web"


# Uncomment these two lines to build for sprig by default.
# [build]
# target = "thumbv6m-none-eabi"

[target.wasm32-unknown-unknown]
runner = "wasm-server-runner"

[alias]
run-wasm = "run --target wasm32-unknown-unknown"
run-sprig = "run --target thumbv6m-none-eabi"
build-uf2 = ["--config", "target.thumbv6m-none-eabi.runner='elf2uf2-rs'", "run", "--target", "thumbv6m-none-eabi"]
run-probe = ["--config", "target.thumbv6m-none-eabi.runner='probe-run --chip RP2040'", "run", "--target", "thumbv6m-none-eabi"]
